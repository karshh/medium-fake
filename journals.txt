As a introduction to a web development course, PHP is one of the easiest languages to get a hold on to, and develop applications in. Building robust and secure applications, however, requires understanding essential principles of programming and having the mind to break problems down into components. 

Laravel is a great framework with a robust CLI which ensures that the tools required to build a full-stack component is simple. However, understanding what is being developed requires a certain degree of knowledge regarding what Laravel actually does with each line of code we write, and how it saves us time and energy relative to if we were required to implement it from scratch.

A major challenge which I've faced while implementing this web application in Laravel is how model and database relationships are handled. Often, I found myself implementing joins, only to realize that laravel handles it all for me (unless you wish to implement something funky). I've also found that certain built-in scaffolds don't tend to conform with what I would require as a default, especially in authorization where hashing and salting is essentially ignored by the implementation.

I am now attempting to build basic CRUD/REST applications in a MEAN stack, and plan to start by emulating another blogging site. Express requires authorization to be implemented manually by the user (using JWT & Passport.js ofcourse), which means that the sugar syntax and auth scaffolds provided by laravel are a nostalgic miss. However, as the popularity and development moves deeper into Node.js, we can expect frameworks on it to match the ease of development that Laravel provides sooner or later, in addition to the clean, object-oriented client application breakdown that client side frameworks have provided us with.